import Head from "next/head";
import { Hit } from "instantsearch.js";
import {
  Carousel,
  Configure,
  getServerState,
  Highlight,
  Hits,
  InstantSearch,
  InstantSearchServerState,
  InstantSearchSSRProvider,
  Pagination,
  RefinementList,
  SearchBox,
  TrendingItems,
} from "react-instantsearch";
import { Panel } from "@/Panel";
import { liteClient as algoliasearch } from "algoliasearch/lite";
import { renderToString } from "react-dom/server";
import singletonRouter from "next/router";
import { createInstantSearchRouterNext } from "react-instantsearch-router-nextjs";

import "instantsearch.css/themes/satellite.css";
import Link from "next/link";
import { GetServerSidePropsContext } from "next";

const searchClient = algoliasearch(
  "latency",
  "6be0576ff61c053d5f9a3225e2a90f76",
);

export default function Home({
  serverState,
  serverUrl,
}: {
  serverUrl: string;
  serverState?: InstantSearchServerState;
}) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <header className="header">
          <h1 className="header-title">
            <Link href="/">Getting started</Link>
          </h1>
          <p className="header-subtitle">
            using{" "}
            <a href="https://github.com/algolia/instantsearch/tree/master/packages/react-instantsearch">
              React InstantSearch
            </a>
          </p>
        </header>

        <div className="container">
          <InstantSearchSSRProvider {...serverState}>
            <InstantSearch
              searchClient={searchClient}
              indexName="instant_search"
              insights={true}
              routing={{
                router: createInstantSearchRouterNext({
                  singletonRouter,
                  serverUrl,
                }),
              }}
            >
              <Configure hitsPerPage={8} />
              <div className="search-panel">
                <div className="search-panel__filters">
                  <Panel header="brand">
                    <RefinementList attribute="brand" />
                  </Panel>
                </div>

                <div className="search-panel__results">
                  <SearchBox placeholder="" className="searchbox" />
                  <Hits hitComponent={HitComponent} />

                  <div className="pagination">
                    <Pagination />
                  </div>
                  <div>
                    <TrendingItems
                      itemComponent={ItemComponent}
                      limit={6}
                      layoutComponent={Carousel}
                    />
                  </div>
                </div>
              </div>
            </InstantSearch>
          </InstantSearchSSRProvider>
        </div>
      </div>
    </>
  );
}

type HitType = Hit<{
  image: string;
  name: string;
  description: string;
}>;

function HitComponent({ hit }: { hit: HitType }) {
  return (
    <article>
      <h1>
        <a href={`/products.html?pid=${hit.objectID}`}>
          <Highlight attribute="name" hit={hit} />
        </a>
      </h1>
      <p>
        <Highlight attribute="description" hit={hit} />
      </p>
      <a href={`/products.html?pid=${hit.objectID}`}>See product</a>
    </article>
  );
}

function ItemComponent({ item }: { item: Hit }) {
  return (
    <div>
      <article>
        <div>
          <img src={item.image} />
          <h2>{item.name}</h2>
        </div>
        <a href={`/products.html?pid=${item.objectID}`}>See product</a>
      </article>
    </div>
  );
}

export async function getServerSideProps({ req }: GetServerSidePropsContext) {
  const protocol = req.headers.referer?.split("://")[0] || "https";
  const serverUrl = `${protocol}://${req.headers.host}${req.url}`;
  const serverState = await getServerState(<Home serverUrl={serverUrl} />, {
    renderToString,
  });

  searchClient.search({
    requests: [{ indexName: "instant_search", filters: "objectID:5477500" }],
  });

  return {
    props: {
      serverState,
      serverUrl,
    },
  };
}
